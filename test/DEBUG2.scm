;(letrec ((list? (lambda (l) (list? l))) (pt-scalar* (lambda () (make-pt))) (build-tree (lambda () (let* ((half-diagonal (pt-scalar*)) (diag-length/2 (pt-x half-diagonal))) ()))) (go (lambda () (build-tree))) (nbody-benchmark (lambda () (go))) (make-raw-pt (lambda () (<change> () #f))) (pt? (lambda (obj) (list? obj))) (pt-1 (lambda (obj) (pt? obj))) (make-pt (lambda () (make-raw-pt))) (pt-x pt-1) (_0 (nbody-benchmark))) ())
(letrec ((plus (lambda (n1 n2)
                 (lambda (f)
                   (lambda (x)
                     (f ((n2 f) x))))))
          (mult (lambda (n1 n2)
                  (lambda (f)
                    (n2 (n1 f)))))
          (pred (lambda (n)
                  (<change>
                    (lambda (x)
                      id)
                    id)))
          (sub (lambda (n2)
                 (n2 pred)))
          (church0? (lambda (n)
                      ((n (lambda (x) #f)) #t)))
          (church=? (lambda (n1 n2)
                      (begin
                        (church0? n2)
                        (sub church1))))
          (church1 (lambda (f)
                     (lambda (x)
                       (f x))))
          (church2 (lambda (f)
                     (lambda (x)
                       (f x)))))
  (church=? (mult church2 (plus church1 #t)) (plus (mult church2 church1) (mult church2 #t))))
